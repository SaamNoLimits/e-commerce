// ‚úÖ On importe la fonction `create` de la biblioth√®que Zustand
// Elle permet de cr√©er un "store" (√©tat global) que l'on peut utiliser partout dans notre application
import { create } from 'zustand'

// ‚úÖ On importe `persist`, un middleware fourni par Zustand
// Il sert √† sauvegarder automatiquement l‚Äô√©tat dans le localStorage du navigateur
import { persist } from 'zustand/middleware'

// ‚úÖ On d√©finit un type TypeScript pour repr√©senter l‚Äô√©tat de notre historique de navigation
// Il contient une liste de produits (chaque produit ayant un id et une cat√©gorie)
type BrowsingHistory = {
  products: { id: string; category: string }[]
}

// ‚úÖ L‚Äô√©tat initial est d√©fini ici : au d√©but, aucun produit n‚Äôest visit√©
const initialState: BrowsingHistory = {
  products: [],
}

// ‚úÖ On cr√©e un store Zustand appel√© `browsingHistoryStore`
// Ce store va √™tre sauvegard√© dans le localStorage gr√¢ce au middleware `persist`
export const browsingHistoryStore = create<BrowsingHistory>()(
  persist(
    // Cette fonction retourne l‚Äô√©tat initial
    () => initialState,
    {
      // Ce nom sera utilis√© comme cl√© dans le localStorage
      name: 'browsingHistoryStore',
    }
  )
)

// ‚úÖ Hook personnalis√© qui simplifie l‚Äôutilisation du store Zustand
// Il expose les produits et deux fonctions : `addItem` pour ajouter, et `clear` pour vider l'historique
export default function useBrowsingHistory() {
  // On extrait les produits directement depuis le store
  const { products } = browsingHistoryStore()

  return {
    // üîÑ Liste actuelle des produits dans l‚Äôhistorique (√† afficher dans l‚Äôinterface utilisateur)
    products,

    // ‚ûï Fonction pour ajouter un produit √† l‚Äôhistorique
    addItem: (product: { id: string; category: string }) => {
      // üîç On cherche si le produit existe d√©j√† dans l‚Äôhistorique (pour √©viter les doublons)
      const index = products.findIndex((p) => p.id === product.id)

      // ‚ùå S‚Äôil existe d√©j√†, on le retire de la liste
      if (index !== -1) products.splice(index, 1)

      // üÜï On ajoute le nouveau produit au d√©but du tableau (pour que les plus r√©cents soient en haut)
      products.unshift(product)

      // üö´ Si on d√©passe 10 produits, on retire le dernier (le plus ancien)
      if (products.length > 10) products.pop()

      // ‚úÖ On met √† jour le store avec la nouvelle liste des produits
      browsingHistoryStore.setState({
        products,
      })
    },

    // üóë Fonction pour supprimer tous les produits de l‚Äôhistorique
    clear: () => {
      // Mise √† jour de l'√©tat : on vide compl√®tement la liste
      browsingHistoryStore.setState({
        products: [],
      })
    },
  }
}
